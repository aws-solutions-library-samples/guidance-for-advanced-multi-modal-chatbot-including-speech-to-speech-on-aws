AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Lambda@Edge function for JWT validation with Cognito. Deploy this after deploying the main chatbot template.
  WARNING: This template must be deployed in us-east-1 region only, as required for Lambda@Edge functions.

Parameters:
  CognitoUserPoolId:
    Type: String
    Description: The Cognito User Pool ID (Refer to main stack output)
    
  CognitoRegion:
    Type: String
    Description: The region where the Cognito User Pool is deployed (Refer to main stack)
    AllowedPattern: '[a-z][a-z]-[a-z]+-[0-9]'
    ConstraintDescription: Must be a valid AWS region (e.g., us-west-2)

  ResourceSuffix:
    Type: String
    Description: Suffix to append to resource names (e.g., dev, test, prod)
    AllowedPattern: ^[a-zA-Z0-9-]*$
    ConstraintDescription: Only alphanumeric characters and hyphens are allowed
    MinLength: '1'
    MaxLength: '20'

Conditions:
  IsUsEast1: !Equals 
    - !Ref 'AWS::Region'
    - 'us-east-1'

Resources:
  EdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'cf-edge-lambda-role-${ResourceSuffix}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub 'cf-edge-lambda-policy-${ResourceSuffix}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*'

  EdgeFunction:
    Type: AWS::Lambda::Function
    Condition: IsUsEast1
    Properties:
      FunctionName: !Sub 'cf-edge-lambda-${ResourceSuffix}'
      Code:
        ZipFile: !Sub |
          import json
          import base64
          import time
          import urllib.request
          import urllib.parse
          from json import loads

          COGNITO_REGION = '${CognitoRegion}'
          USER_POOL_ID = '${CognitoUserPoolId}'
          JWKS_URL = f'https://cognito-idp.{COGNITO_REGION}.amazonaws.com/{USER_POOL_ID}/.well-known/jwks.json'
          def decode_token_segments(token):
            try:
                # Split token into header, payload, signature
                header_b64, payload_b64, signature = token.split('.')
                
                # Add padding if needed
                def add_padding(b64_str):
                    pad_length = 4 - (len(b64_str) % 4)
                    if pad_length != 4:
                        b64_str += '=' * pad_length
                    return b64_str
                
                # Decode header and payload
                header = loads(base64.urlsafe_b64decode(add_padding(header_b64)).decode('utf-8'))
                payload = loads(base64.urlsafe_b64decode(add_padding(payload_b64)).decode('utf-8'))
                
                return header, payload
            except Exception as e:
                raise Exception(f'Invalid token format: {str(e)}')

          def verify_token_expiry(payload):
              current_time = int(time.time())
              exp_time = int(payload.get('exp', 0))
              
              if current_time > exp_time:
                  raise Exception('Token has expired')
              
              return True

          def lambda_handler(event, context):
              request = event['Records'][0]['cf']['request']
              
              # Handle OPTIONS preflight request
              if request.get('method') == 'OPTIONS':
                  return {
                      'status': '204',
                      'statusDescription': 'OK',
                      'headers': {
                          'access-control-allow-origin': [{
                              'key': 'Access-Control-Allow-Origin',
                              'value': '*'
                          }],
                          'access-control-allow-methods': [{
                              'key': 'Access-Control-Allow-Methods',
                              'value': 'GET, HEAD, OPTIONS'
                          }],
                          'access-control-allow-headers': [{
                              'key': 'Access-Control-Allow-Headers',
                              'value': 'Content-Type, Accept'
                          }],
                          'access-control-max-age': [{
                              'key': 'Access-Control-Max-Age',
                              'value': '86400'
                          }]
                      }
                  }

              # Get query parameters
              query_string = request.get('querystring', '')
              if not query_string:
                  return generate_error_response('401', 'No auth token provided')
              
              # Parse query string
              params = {}
              if query_string:
                  for param in query_string.split('&'):
                      if '=' in param:
                          key, value = param.split('=', 1)
                          params[key] = urllib.parse.unquote(value)

              token = params.get('auth')
              if not token:
                  return generate_error_response('401', 'No auth token provided')

              try:
                  # Decode token without verification
                  header, payload = decode_token_segments(token)
                  
                  # Verify expiry
                  verify_token_expiry(payload)
                  
                  # Verify issuer (iss) if needed
                  expected_issuer = f'https://cognito-idp.{COGNITO_REGION}.amazonaws.com/{USER_POOL_ID}'
                  if payload.get('iss') != expected_issuer:
                      raise Exception('Invalid token issuer')
                  
                  # If all checks pass, return the request
                  return request

              except Exception as e:
                  return generate_error_response('403', f'Invalid token: {str(e)}')

          def generate_error_response(status, message):
              return {
                  'status': status,
                  'statusDescription': 'Error',
                  'headers': {
                      'access-control-allow-origin': [{
                          'key': 'Access-Control-Allow-Origin',
                          'value': '*'
                      }],
                      'content-type': [{
                          'key': 'Content-Type',
                          'value': 'application/json'
                      }]
                  },
                  'body': json.dumps({'message': message})
              }
      
      Handler: index.lambda_handler
      Role: !GetAtt EdgeFunctionRole.Arn
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128

  EdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: IsUsEast1
    Properties:
      FunctionName: !Ref EdgeFunction
      Description: !Sub 'Version for Lambda@Edge ${ResourceSuffix}'

Outputs:
  EdgeFunctionVersionARN:
    Description: Lambda@Edge Function Version ARN (Use this for CloudFront)
    Value: !Ref EdgeFunctionVersion
    Condition: IsUsEast1
